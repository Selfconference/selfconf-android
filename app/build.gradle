// Manifest version information!
def versionMajor = 2
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0
// bump for dogfood builds, public betas, etc.

buildscript {
  repositories {
    maven { url "https://maven.fabric.io/public" }
  }
  dependencies {
    classpath "com.android.tools.build:gradle:$rootProject.deps.androidGradlePlugin"
    classpath "com.neenbedankt.gradle.plugins:android-apt:$rootProject.deps.androidApt"
    classpath "io.fabric.tools:gradle:$rootProject.deps.fabric"
    classpath "me.tatarka:gradle-retrolambda:$rootProject.deps.retrolambda"
    classpath "com.github.ben-manes:gradle-versions-plugin:$rootProject.deps.gradleVersionsPlugin"
  }
}

repositories {
  maven { url "https://maven.fabric.io/public" }
}

apply plugin: "com.android.application"
apply plugin: "me.tatarka.retrolambda"
apply plugin: "io.fabric"
apply plugin: "com.neenbedankt.android-apt"
apply plugin: "com.github.ben-manes.versions"

apply from: "test-resources.gradle"

android {
  compileSdkVersion rootProject.compileSdkVersion
  buildToolsVersion rootProject.buildToolsVersion

  defaultConfig {
    applicationId "org.selfconference.android"
    minSdkVersion rootProject.minSdkVersion
    targetSdkVersion rootProject.targetSdkVersion
    versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    vectorDrawables.useSupportLibrary = true
  }

  signingConfigs {
    release {
      def prop = loadProperties("release-keystore.properties")
      storeFile rootProject.file("release.jks")
      storePassword prop.storePassword
      keyAlias prop.keyAlias
      keyPassword prop.keyPassword
    }
    debug {
      storeFile rootProject.file("debug.keystore")
      storePassword "android"
      keyAlias "android"
      keyPassword "android"
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      signingConfig signingConfigs.release

      resValue "string", "app_name", "Self.conference"

      buildConfigField "String", "SELF_CONFERENCE_API_ENDPOINT", "\"http://selfconference.org/api/\""
    }
    debug {
      applicationIdSuffix ".debug"
      signingConfig signingConfigs.debug

      resValue "string", "app_name", "Self.conference Debug"

      buildConfigField "String", "SELF_CONFERENCE_API_ENDPOINT",
          "\"http://selfconf-dev.herokuapp.com/api/\""
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude "META-INF/services/javax.annotation.processing.Processor"
  }

  testOptions.unitTests.all {
    testLogging {
      events "passed", "skipped", "failed"
    }
  }
}

configurations.all {
  resolutionStrategy {
    force "com.android.support:support-annotations:$rootProject.deps.supportLibrary"
  }
}

dependencies {
  compile "com.android.support:support-annotations:$rootProject.deps.supportLibrary"
  compile "com.android.support:appcompat-v7:$rootProject.deps.supportLibrary"
  compile "com.android.support:support-v4:$rootProject.deps.supportLibrary"
  compile "com.android.support:design:$rootProject.deps.supportLibrary"
  compile "com.android.support:recyclerview-v7:$rootProject.deps.supportLibrary"
  compile "com.android.support:cardview-v7:$rootProject.deps.supportLibrary"

  apt "com.ryanharter.auto.value:auto-value-parcel:$rootProject.deps.autoValueParcel"
  compile "com.ryanharter.auto.value:auto-value-parcel-adapter:$rootProject.deps.autoValueParcel"
  provided "com.google.auto.value:auto-value:$rootProject.deps.autoValue"
  compile "com.jakewharton:butterknife:$rootProject.deps.butterknife"
  compile "com.jakewharton.timber:timber:$rootProject.deps.timber"
  compile "com.squareup.dagger:dagger:$rootProject.deps.dagger"
  apt "com.squareup.dagger:dagger-compiler:$rootProject.deps.dagger"
  compile "com.squareup.picasso:picasso:$rootProject.deps.picasso"
  compile "com.squareup.okhttp3:okhttp:$rootProject.deps.okhttp"
  compile "com.squareup.okhttp3:logging-interceptor:$rootProject.deps.okhttp"
  compile "com.squareup.retrofit2:retrofit:$rootProject.deps.retrofit"
  compile "com.squareup.retrofit2:converter-gson:$rootProject.deps.retrofit"
  compile "com.squareup.retrofit2:adapter-rxjava:$rootProject.deps.retrofit"

  compile "com.birbit:android-priority-jobqueue:$rootProject.deps.jobQueue"
  compile "org.greenrobot:eventbus:$rootProject.deps.eventBus"

  compile "com.google.code.gson:gson:$rootProject.deps.gson"
  compile "joda-time:joda-time:$rootProject.deps.jodaTime"

  compile "com.google.guava:guava:$rootProject.deps.guava"

  compile "io.reactivex:rxjava:$rootProject.deps.rxJava"
  compile "io.reactivex:rxandroid:$rootProject.deps.rxJavaAndroid"
  compile "io.reactivex:rxjava-string:$rootProject.deps.rxJavaString"
  compile "com.trello:rxlifecycle:$rootProject.deps.rxLifecycle"
  compile "com.trello:rxlifecycle-components:$rootProject.deps.rxLifecycle"

  compile "com.amulyakhare:com.amulyakhare.textdrawable:$rootProject.deps.textDrawable"
  compile("com.crashlytics.sdk.android:crashlytics:$rootProject.deps.crashlytics") {
    transitive = true;
  }

  debugCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.deps.leakCanary"
  releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.deps.leakCanary"

  testCompile "org.robolectric:robolectric:$rootProject.deps.robolectric"
  testCompile "junit:junit:$rootProject.deps.junit"
  testCompile "com.squareup.assertj:assertj-android:$rootProject.deps.assertjAndroid"
}

def Properties loadProperties(String filename) {
  Properties properties = new Properties()
  if (rootProject.file(filename).exists()) {
    properties.load(new FileInputStream(rootProject.file(filename)))
  }
  return properties
}
