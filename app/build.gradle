// Manifest version information!
def versionMajor = 0
def versionMinor = 9
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.0'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "org.selfconference.android"
        minSdkVersion 16
        targetSdkVersion 21
        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }

    signingConfigs {
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            def prop = loadProperties('release.properties')

            resValue "string", "app_name", "Self.conference"
            resValue "string", "parse_application_id", prop.parseApplicationId ?: System.getenv('parseApplicationId')
            resValue "string", "parse_client_id", prop.parseClientSecret ?: System.getenv('parseClientSecret')
        }
        debug {
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debug

            def prop = loadProperties('debug.properties')

            resValue "string", "app_name", "Self.conference Debug"
            resValue "string", "parse_application_id", prop.parseApplicationId ?: System.getenv('parseApplicationId')
            resValue "string", "parse_client_id", prop.parseClientSecret ?: System.getenv('parseClientSecret')
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.android.support:support-annotations:21.0.3'
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:recyclerview-v7:21.0.3'
    compile 'com.android.support:cardview-v7:21.0.3'

    compile 'com.jakewharton:butterknife:6.0.0'
    compile 'com.jakewharton.timber:timber:2.5.0'
    compile 'com.squareup.dagger:dagger:1.2.2'
    apt 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile 'com.squareup.picasso:picasso:2.5.0'

    compile 'com.google.code.gson:gson:2.3.1'
    compile 'net.danlew:android.joda:2.7.0'

    compile 'com.github.frankiesardo:auto-parcel:0.2'
    apt 'com.github.frankiesardo:auto-parcel-processor:0.2'

    compile 'com.jpardogo.materialtabstrip:library:1.0.8'

    compile 'com.google.guava:guava:18.0'

    compile 'io.reactivex:rxjava:1.0.5'
    compile 'io.reactivex:rxandroid:0.24.0'
    compile 'io.reactivex:rxjava-string:0.22.0'

    compile 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'
    compile('com.crashlytics.sdk.android:crashlytics:2.2.2@aar') {
        transitive = true;
    }

    testCompile 'org.robolectric:robolectric:2.4'
    testCompile 'junit:junit:4.12'
    testCompile('com.squareup.assertj:assertj-android:1.0.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

def Properties loadProperties(String filename) {
    Properties properties = new Properties()
    if (rootProject.file(filename).exists()) {
        properties.load(new FileInputStream(rootProject.file(filename)))
    }
    return properties
}